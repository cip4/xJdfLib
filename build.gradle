import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

group = 'org.cip4.lib.xjdf'
description = 'CIP4 xJdfLib'
version = project.hasProperty('projectVersion') ? project.projectVersion : '0.x-SNAPSHOT'

def generatedFiles = file("src/generated")
def generatedSources = file("${generatedFiles}/java")
def generatedResources = file("${generatedFiles}/resources")
def schema = file('src/main/resources/JDF20.xsd')

java {
    withJavadocJar()
    withSourcesJar()
}

targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.description
                description = 'CIP4 XJDF Library'
                url = 'https://github.com/cip4/xJdfLib'

                organization {
                    name = "CIP4 Organization"
                    url = "https://www.cip4.org"
                }
                developers {
                    developer {
                        id = "cip4-development"
                        name = "CIP4 Development"
                    }
                }
                licenses {
                    license {
                        name = 'CIP4 Software License'
                        url = 'https://github.com/cip4/xJdfLib/blob/master/LICENSE.md'
                    }
                }
                scm {
                    connection = 'https://github.com/cip4/xJdfLib.git'
                    developerConnection = 'scm:git:https://github.com/cip4/xJdfLib.git'
                    url = 'https://github.com/cip4/xJdfLib'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

nexusStaging {
    packageGroup = 'org.cip4'
    stagingProfileId = '105e2b532689c6'
    numberOfRetries = 400
    delayBetweenRetriesInMillis = 2500
    username ossrhUsername
    password ossrhPassword
}

configurations {
    xjc
}

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
}

signing {
    if (!version.endsWith("SNAPSHOT")) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    failOnError = false
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

processResources {
    filesMatching(['**/*.properties']) {
        filter(ReplaceTokens, tokens: [
                'version'  : project.properties['version'],
                'buildtime': new Date().format("yyyy-MM-dd HH:mm:ss'Z'", TimeZone.getTimeZone("GMT"))
        ])
    }
}

dependencies {
    compile 'commons-io:commons-io:2.11.0'
    compile 'org.apache.commons:commons-lang3:3.12.0'
    compile 'com.sun.xml.bind:jaxb-impl:2.3.6'
    compile 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    compile 'javax.xml.bind:jaxb-api:2.3.1'
    compile 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.12.0'
    compile 'org.jetbrains:annotations:23.0.0'
    compile 'org.reflections:reflections:0.10.2'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'xerces:xercesImpl:2.12.2'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testCompile 'org.mockito:mockito-core:4.4.0'
    testCompile 'org.hamcrest:hamcrest-library:2.2'
    testCompile 'org.junit-pioneer:junit-pioneer:1.6.2'

    xjc 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.3.6'
    xjc 'com.sun.xml.bind:jaxb-impl:2.3.6'
    xjc 'javax.xml.bind:jaxb-api:2.3.1'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics:0.12.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.12.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
}

task xjc() {
    def bindings = file('src/main/resources/binding.xjb')
    inputs.files(schema, bindings)
    outputs.dir(generatedSources)
    outputs.dir(generatedResources)
    doLast {
        generatedSources.mkdirs()
        file("$generatedResources/META-INF").mkdirs()
        Locale defaultLocale = Locale.getDefault();
        Locale.setDefault(Locale.US)
        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)
        ant.xjc(
                destdir: generatedSources,
                schema: schema,
                binding: bindings,
                readonly: true,
                header: false,
                removeOldOutput: true,
                extension: true,
        ) {
            arg(line: "-mark-generated -Xfluent-api -Xequals -XhashCode -Xinject-code" +
                    " -episode $generatedResources/META-INF/sun-jaxb.episode")
        }
        Locale.setDefault(defaultLocale)
    }
}

clean {
    delete generatedFiles
}

sourceSets {
    main {
        java.srcDir(generatedSources)
        output.dir(generatedResources, builtBy: 'xjc')
    }
}

compileJava {
    dependsOn(xjc)
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.description,
                "Implementation-Version": project.version,
                "Implementation-Vendor-Id": project.group,
                "Specification-Title": project.description,
                "Specification-Version": project.version,
                "Build-Jdk": JavaVersion.current(),
        )
    }
}

task zipTestPackage(type: Zip) {
    from 'src/test/resources/org/cip4/lib/xjdf/testPackage'
    include '*'
    include '*/*'
    archiveName 'testPackage.zip'
    destinationDir(file("$buildDir/resources/test/org/cip4/lib/xjdf"))
}

processTestResources.dependsOn(zipTestPackage)
