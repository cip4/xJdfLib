plugins {
    id 'io.codearte.nexus-staging' version '0.11.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "jacoco"
apply from: 'gradle/deploy.gradle'

group = 'org.cip4.lib.xjdf'
version = project.hasProperty('projectVersion') ? project.projectVersion : file('version.properties').text.trim()
description = """CIP4 xJdfLib"""

sourceCompatibility = 1.7
targetCompatibility = sourceCompatibility

def generatedFiles = file("src/generated")
def generatedSources = file("${generatedFiles}/java")
def generatedResources = file("${generatedFiles}/resources")

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    xjc
}
repositories {
    maven { url "https://repository.apache.org/content/groups/public/" }
    maven { url "https://repository.jboss.org/nexus/content/groups/public-jboss/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0.1'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'
    compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '0.9.1'
    compile group: 'org.jetbrains', name: 'annotations', version: '15.0'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'

    xjc group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'
    xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.11'
    xjc group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0.1'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.9.5'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.9.5'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-fluent-api', version: '3.0'
}

task createBuildInfoFile(dependsOn: processResources) {
    def buildInfoFile = new File("$buildDir/resources/main/org/cip4/lib/xjdf/build.properties")
    outputs.file(buildInfoFile)
    doLast {
        def date = new Date()
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('build.date', date.format('yyyy-MM-dd HH:mm:ss'))
        props.store(buildInfoFile.newWriter(), null)
    }
}

task xjc() {
    def schema = file('src/main/resources/JDF20.xsd')
    def bindings = file('src/main/resources/binding.xjb')
    inputs.files(schema, bindings)
    outputs.dir(generatedSources)
    outputs.dir(generatedResources)
    doLast {
        generatedSources.mkdirs()
        file("$generatedResources/META-INF").mkdirs()
        Locale defaultLocale = Locale.getDefault();
        Locale.setDefault(Locale.US)
        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)
        ant.xjc(
                destdir: generatedSources,
                schema: schema,
                binding: bindings,
                readonly: true,
                header: false,
                removeOldOutput: true,
                extension: true,
        ) {
            arg(line: "-mark-generated -Xfluent-api -Xequals -XhashCode -Xinject-code" +
                    " -episode $generatedResources/META-INF/sun-jaxb.episode")
        }
        Locale.setDefault(defaultLocale)
    }
}

clean.doFirst {
    delete generatedFiles
}

sourceSets {
    main {
        java.srcDir(generatedSources)
        output.dir(generatedResources, builtBy: 'xjc')
    }
}

compileJava {
    dependsOn(xjc)
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jar {
    dependsOn createBuildInfoFile
    manifest {
        attributes(
            "Implementation-Title": project.description,
            "Implementation-Version": project.version,
            "Implementation-Vendor-Id": project.group,
            "Specification-Title": project.description,
            "Specification-Version": project.version,
            "Build-Jdk": JavaVersion.current(),
        )
    }
}

idea {
    module {
        generatedSourceDirs += file(generatedSources)
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = targetCompatibility
    }
}

task zipTestPackage(type: Zip) {
    from 'src/test/resources/org/cip4/lib/xjdf/testPackage'
    include '*'
    include '*/*'
    archiveName 'testPackage.zip'
    destinationDir(file("$buildDir/resources/test/org/cip4/lib/xjdf"))
}
processTestResources.dependsOn(zipTestPackage)