import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'jacoco'
}

group = 'org.cip4.lib.xjdf'
description = 'CIP4 xJdfLib'
version = project.hasProperty('projectVersion') ? project.projectVersion : '2.1.x-DEV'

def generatedFiles = file("src/generated")
def generatedSources = file("${generatedFiles}/java")
def generatedResources = file("${generatedFiles}/resources")
def schema = file('src/main/resources/org/cip4/lib/xjdf/schema/jdfschema_2_1.xsd')

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.description
                description = 'CIP4 XJDF Library'
                url = 'https://github.com/cip4/xJdfLib'

                organization {
                    name = "CIP4 Organization"
                    url = "https://www.cip4.org"
                }
                developers {
                    developer {
                        id = "cip4-development"
                        name = "CIP4 Development"
                    }
                }
                licenses {
                    license {
                        name = 'CIP4 Software License'
                        url = 'https://github.com/cip4/xJdfLib/blob/master/LICENSE.md'
                    }
                }
                scm {
                    connection = 'https://github.com/cip4/xJdfLib.git'
                    developerConnection = 'scm:git:https://github.com/cip4/xJdfLib.git'
                    url = 'https://github.com/cip4/xJdfLib'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

task updateSchema() {
    def schemes = ["jdfschema_2_0", "jdfschema_2_1"]

    schemes.forEach { schemaName ->
        println "Update ${schemaName} from https://schema.cip4.org..."
        def dest = new File("src/main/resources/org/cip4/lib/xjdf/schema/${schemaName}.xsd")
        dest.delete()

        dest << new URL ("https://schema.cip4.org/${schemaName}/xjdf.xsd").getText()
    }
}

nexusStaging {
    packageGroup = 'org.cip4'
    stagingProfileId = '105e2b532689c6'
    numberOfRetries = 400
    delayBetweenRetriesInMillis = 2500
    username ossrhUsername
    password ossrhPassword
}

configurations {
    xjc
}

repositories {
    mavenCentral()
}

signing {
    if (!version.endsWith("SNAPSHOT")) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    failOnError = false
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

processResources {
    filesMatching(['**/*.properties']) {
        filter(ReplaceTokens, tokens: [
                'name': project.properties['description'],
                'version': project.properties['version'],
                'artifactId': project.properties['name'],
                'timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", TimeZone.getTimeZone("GMT"))
        ])
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.4'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.3'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'xerces:xercesImpl:2.12.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.1.0'

    xjc 'com.sun.xml.bind:jaxb-core:4.0.3'
    xjc 'com.sun.xml.bind:jaxb-xjc:4.0.4'
    xjc 'com.sun.xml.bind:jaxb-impl:4.0.4'
    xjc 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'

    xjc 'org.patrodyne.jvnet:hisrc-basicjaxb:0.12.2'
    xjc 'org.patrodyne.jvnet:hisrc-basicjaxb-ant:2.1.0'
    xjc 'org.patrodyne.jvnet:hisrc-hyperjaxb-annox-plugin:1.1.2'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
}

task xjc() {
    def bindings = file('src/main/resources/org/cip4/lib/xjdf/binding.xjb')
    inputs.files(schema, bindings)
    outputs.dir(generatedSources)
    outputs.dir(generatedResources)
    doLast {
        generatedSources.mkdirs()
        file("$generatedResources/META-INF").mkdirs()
        Locale defaultLocale = Locale.getDefault();
        Locale.setDefault(Locale.US)
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.xjc.asPath
        )
        ant.xjc(
                destdir: generatedSources,
                schema: schema,
                binding: bindings,
                readonly: true,
                header: false,
                removeOldOutput: true,
                extension: true,
        ) {
            arg(line: "-mark-generated -Xfluent-api -Xinject-code -XsimpleEquals -XsimpleHashCode -Xannotate -verbose" +
                    " -episode $generatedResources/META-INF/sun-jaxb.episode")
        }
        Locale.setDefault(defaultLocale)
    }
}

clean {
    delete generatedFiles
}

sourceSets {
    main {
        java.srcDir(generatedSources)
        output.dir(generatedResources, builtBy: 'xjc')
    }
}

compileJava {
    dependsOn(xjc)
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.description,
                "Implementation-Version": project.version,
                "Implementation-Vendor-Id": project.group,
                "Specification-Title": project.description,
                "Specification-Version": project.version,
                "Build-Jdk": JavaVersion.current(),
        )
    }
}

task zipTestPackage(type: Zip) {
    from 'src/test/resources/org/cip4/lib/xjdf/testPackage'
    include '*'
    include '*/*'
    archiveName 'testPackage.zip'
    destinationDir(file("$buildDir/resources/test/org/cip4/lib/xjdf"))
}

processTestResources.dependsOn(zipTestPackage)

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
               TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
    }
}