package org.cip4.lib.xjdf;

import org.cip4.lib.xjdf.schema.AuditCreated;
import org.cip4.lib.xjdf.schema.FileSpec;
import org.cip4.lib.xjdf.schema.Header;
import org.cip4.lib.xjdf.schema.NodeInfo;
import org.cip4.lib.xjdf.schema.Part;
import org.cip4.lib.xjdf.schema.ResourceSet;
import org.cip4.lib.xjdf.schema.RunList;
import org.cip4.lib.xjdf.schema.Side;
import org.cip4.lib.xjdf.schema.SpecificResource;
import org.cip4.lib.xjdf.schema.XJDF;
import org.cip4.lib.xjdf.type.DateTime;
import org.cip4.lib.xjdf.type.URI;
import org.cip4.lib.xjdf.xml.internal.JAXBContextFactory;
import org.cip4.lib.xjdf.xml.internal.XJdfNamespaceMapper;
import org.junit.jupiter.api.Test;

import javax.xml.bind.Marshaller;
import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class XJdfDocumentTest {

    @Test
    public void createXJDF_1() throws Exception {

        // ARRANGE
        XJdfDocument xjdfDoc = new XJdfDocument("JobID", new String[] {"ConventionalPrinting", "Cutting"});

        // audit pool
        AuditCreated auditCreated = new AuditCreated();
        Header header = new Header();
        header.setAgentName("Test Agent");
        auditCreated.setHeader(header);
        xjdfDoc.addAudit(auditCreated);

        // resources simple
        NodeInfo nodeInfo = new NodeInfo();
        nodeInfo.setEnd(new DateTime(2018,7,23,9,23,0));
        xjdfDoc.addResourceSet(nodeInfo, ResourceSet.Usage.INPUT);

        // resource multiple
        Map<Part, RunList> runListMap = new HashMap<>();

        Part front = new Part();
        front.setSide(Side.FRONT);
        runListMap.put(front, new RunList());
        runListMap.get(front).setFileSpec(new FileSpec());
        runListMap.get(front).getFileSpec().setURL(new URI(new java.net.URI("https://example.org/front.pdf")));

        Part back = new Part();
        back.setSide(Side.BACK);
        runListMap.put(back, new RunList());
        runListMap.get(back).setFileSpec(new FileSpec());
        runListMap.get(back).getFileSpec().setURL(new URI(new java.net.URI("https://example.org/back.pdf")));

        xjdfDoc.addResourceSet(runListMap, ResourceSet.Usage.INPUT);

        // ACT
        XJDF xjdf = xjdfDoc.getXjdf();

        // ASSERT
        byte[] bytes = marshall(xjdf);

        System.out.println("----------------");
        System.out.println("");
        System.out.println(new String(bytes));
        System.out.println("");
        System.out.println("----------------");
    }

    /**
     * Marshall a builder
     * @return Document as byte array.
     */
    private byte[] marshall(Object obj) throws Exception {

        // marshall XJDF document
        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        Marshaller m = JAXBContextFactory.getInstance().createMarshaller();
        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        m.setProperty("com.sun.xml.bind.namespacePrefixMapper", new XJdfNamespaceMapper());
        m.setProperty("com.sun.xml.bind.xmlHeaders", "\r\n<!-- Generated by CIP4 xJdfLib JUnit Test -->");
        m.marshal(obj, bos);

        bos.flush();
        bos.close();

        return bos.toByteArray();
    }
}