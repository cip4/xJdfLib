package org.cip4.lib.xjdf.builder;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import jakarta.xml.bind.Marshaller;
import org.cip4.lib.xjdf.xml.XJdfConstants;
import org.cip4.lib.xjdf.xml.internal.JAXBContextFactory;
import org.cip4.lib.xjdf.xml.internal.NamespaceManager;
import org.cip4.lib.xjdf.xml.internal.XJdfNamespaceMapper;
import org.xml.sax.InputSource;

/**
 * Abstract JUnit test case for all Builder classes.
 */
public abstract class AbstractBuilderTest<T> {

	/**
	 * Default constructor.
	 */
	public AbstractBuilderTest() {

        try {
            JAXBContextFactory.init();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get XJDF Document as byte stream.
     * @param builder Builder to build the object to be marshaled.
     *
     * @return Marshaled object as byte array.
     * @throws Exception If the marshalling process fails.
     */
    protected byte[] marshalResult(AbstractNodeBuilder<T> builder) throws Exception {

        // get XJDF Node
        T obj = builder.build();

        // return bytes
        return marshall(obj);
    }

	/**
	 * Marshall a builder
	 * @return Document as byte array.
	 */
	private byte[] marshall(Object obj) throws Exception {

        // marshall XJDF document
        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        Marshaller m = JAXBContextFactory.getInstance().createMarshaller();
        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        m.setProperty("com.sun.xml.bind.namespacePrefixMapper", new XJdfNamespaceMapper());
        m.setProperty("com.sun.xml.bind.xmlHeaders", "\r\n<!-- Generated by CIP4 xJdfLib JUnit Test -->");
        m.marshal(obj, bos);

        bos.flush();
        bos.close();

		return bos.toByteArray();
	}

	/**
	 * Helper method for analyzing JAXB output by xpath.
	 * @param bytes Current XJdf Document as byte array.
	 * @param xPathExpr XPath to validate.
	 * @return Value as String.
	 */
	protected String getXPathValue(byte[] bytes, String xPathExpr) throws Exception {

        // create XPath query
        NamespaceManager nsManager = new NamespaceManager();
        nsManager.addNamespace("xjdf", XJdfConstants.NAMESPACE_JDF20);

        XPathFactory xPathFactory = XPathFactory.newInstance();
        XPath xPath = xPathFactory.newXPath();
        xPath.setNamespaceContext(nsManager);

        XPathExpression xPathExpression = xPath.compile(xPathExpr);

        // execute xPath query
        InputStream is = new ByteArrayInputStream(bytes);

		return xPathExpression.evaluate(new InputSource(is));
	}
}