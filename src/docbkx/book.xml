<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>CIP4 xJDFLib</title>

    <abstract>
      <para>This document describes the structure and functionality of CIP4
      xJdfLib and how to use it. The library is written in Java and manages
      the dealing with XJDF Documents and JMF Messages. It provides methods
      for creation, modification and analyzing.</para>
    </abstract>
  </info>

  <chapter>
    <title>Introduction</title>

    <para>The major conceptual change in JDF 2.0 (or XJDF) is that the
    technology no longer attempts to model the entire job as one large "job
    ticket" but rather specifies an interchange format between two
    applications that are assumed to have an internal data model that is not
    necessarily based on JDF. Thus each JDF ticket specifies a single
    transaction between two parties. A single job may be modeled as one or
    more JDF transactions.</para>

    <para>This fact also requires a conceptual change of the JDF libraries as
    well. Among other things the focus of 1.x libraries is dealing with large
    XML files (XML files were used as data storage), managing concurrency file
    access (spawn and merge) and handling the workflow logic (references).
    Also there are implemented very common XML functionalities like creating
    Java objects from XSD Schema etc.</para>

    <para>The fundamental concepts of JDF (and the library) were designed in
    the nineties. At this time XML was a very new technology and just a few
    early XML Tools had existed. Further, the XML technology itself was in a
    very early phase of development. Therefore, it was essential to include
    all the implementation specific details mentioned into the JDF
    Specification to get it working.</para>

    <para>Over the last two decades XML has become very popular. Many tools
    have been designed and many conceptual enhancements in XML have been done.
    For example, one significant enhancement is XPath. More details about the
    XPath W3C Standard later in this document or on the W3C website:
    http://www.w3.org/TR/xpath/.</para>

    <para>Due to the major change from JDF 1.x to JDF 2.0 a redesign of the
    JDF libraries is strongly recommended. The new CIP4 XJDF Library
    ("xJdfLib") is based on commonly used libraries and technologies like the
    Apache or JAXB framework. Supplementary functionality which has been
    removed from JDF Specification no longer makes the library unnecessarily
    complex for reasons of backwards compatibility. The goal of xJdfLib is to
    provide a lightweight, modern and easy to use library optimized for actual
    requirements. This document describes the concepts and the usage of the
    CIP4 xJdfLib.</para>
  </chapter>

  <chapter>
    <title>The xJdfLib Java Library</title>

    <para>The CIP4 xJdfLib Java Library is based on Java. The latest stable
    version always is being published on the CIP4 Website on page “Technical
    Resources -&gt; Downloads -&gt; Internal Source”. Furthermore, the library
    is an Apache Maven project. So the latest stable version also is available
    in the public Central Maven Repositroy:</para>

    <programlisting language="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.cip4.lib.xjdf&lt;/groupId&gt;
    &lt;artifactId&gt;xJdfLib&lt;/artifactId&gt;
    &lt;version&gt;0.4&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

    <para>Early Next-Version-Snapshots of the CIP4 xJdfLib Library are being
    published in the public OSS Sonatype Snapshot Repository:</para>

    <programlisting language="xml">&lt;repository&gt;
    &lt;id&gt;SnapshotOSS&lt;/id&gt;
    &lt;name&gt;OSS Snapshot&lt;/name&gt;
    &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;
    &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
    &lt;/snapshots&gt;
&lt;/repository&gt;</programlisting>

    <programlisting language="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.cip4.lib.xjdf&lt;/groupId&gt;
    &lt;artifactId&gt;xJdfLib&lt;/artifactId&gt;
    &lt;version&gt;0.5-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
  </chapter>

  <chapter>
    <title>Core Components</title>

    <section>
      <title>XJdfNodeFactory</title>

      <para>The XJdfNodeFactory is the factory class for creating new
      instances of XJDF-Node-Objects. The class provides at least one simple
      Creation-Method per XJDF Node defined in XJDF Specification. Moreover,
      the class also provides extended Creation-Methods for commonly used
      nodes (e. g. GeneralID, RunList etc.) which also initializes the object
      after creation.</para>

      <programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();</programlisting>

      <para>Following a demonstration about the differance between simple and
      extended Creation-Methods. For example, when working with GeneralIDs
      most of them consist only of the attributes "IDUsage" and "IDValue".
      Using the simple method, the creation of such a GeneralID Node would
      require three lines of code. The first line creates the new Node-Object
      whereas the next two lines initialize the object. Each attribute
      explicitly is set by a setter call:</para>

      <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// New GeneralID XJDF Node Object using the simple method
GeneralID generalId = nf.createGeneralID();
generalId.setIDUsage("IDCatalog");
generalId.setIDValue("42");</programlisting>How ever, the creation of XJDF
      Documents only with the usage of simple Creation-Methods probably will
      consumes time and would raise code complexity. Extended Creation-Methods
      provides a more straighter way. Using these methods commonly used XJDF
      Nodes are able to be created and initialized by a single line of
      code:</para>

      <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// New GeneralID XJDF Node Object using the extended method
GeneralID generalId = nf.createGeneralID("IDCatalog", "42");</programlisting></para>

      <para>Both methods creates one and the same GeneralID Node. Simple
      methods raise the flexibility of attribute management whereas the
      extended ones decrease complexity, maintenance and produce a more
      clearly source code.</para>

      <para>It is recommended to use the extended Creation-Methods whenever
      there is one available. If the extended method does not fit the needs,
      the preinitialized node object always can be modified in a further line
      of code. For instance, in some situations the<emphasis>
      /RunList/FileSpec</emphasis> Node may contain an addtional attribute
      <emphasis>UserFileName</emphasis> which is not supported by an extended
      method:</para>

      <para><programlisting language="xml">[...]
&lt;xjdf:RunList&gt;
    &lt;xjdf:FileSpec URL="http://192.168.1.113:80/10496" 
        UserFileName="myFileName.pdf"/&gt;
&lt;/xjdf:RunList&gt;
[...]</programlisting>Here a demonstration how to realize such a modification
      in a further step:<programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// best practice creating indivudal nodes
RunList runList = nf.createRunList("http://192.168.1.113:80/10496");
runList.getFileSpec().setUserFileName("myFileName.pdf");</programlisting></para>
    </section>

    <section>
      <title>Builder Classes</title>

      <para>Most of the XJDF-Node-Objects can easily be created using the
      XJdfNodeFactory as described in the chapter before. How ever, more
      complex nodes like the XJDF-Root-Node or the Product-Node are nodes
      which contain a set of subnodes in a well defined structure. This
      requires additional logic to organize all child nodes within the parent
      node. Builder classes are designed to achieve this.</para>

      <para>The XJDF-Root-Node for example is a parent node for all Product-
      and Parameter-Nodes. All <emphasis>Product</emphasis> items are listed
      under subelement <emphasis>ProductList</emphasis> whereas all
      <emphasis>Parameter</emphasis> nodes are listed in specific
      <emphasis>ParameterSet</emphasis> elements. So, when adding a new
      Parameter-Node the builder class automatically checks whether the right
      <emphasis>ParameterSet</emphasis> element already exists. If not, the
      library creates a new one and finally puts the new parameter to the
      right position.</para>

      <para><programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;!-- Generated by CIP4 xJdfLib 0.4 --&gt;
&lt;xjdf:XJDF xmlns:xjdf="http://www.CIP4.org/JDFSchema_2_0" ID="XJDF_CCC45NIM" 
    DescriptiveName="My lovely Poster" JobID="FA-SIG-123456" 
    Category="Web2Print" Version="2.0"&gt;
    &lt;xjdf:ProductList&gt;
        &lt;xjdf:Product DescriptiveName="FA-PRD-123456" Amount="1500" 
            ProductType="Poster" ProductTypeDetails="PTD Value"&gt;
            &lt;xjdf:Intent Name="MediaIntent"&gt;
                &lt;xjdf:MediaIntent MediaQuality="IPM_90"/&gt;
            &lt;/xjdf:Intent&gt;
        &lt;/xjdf:Product&gt;
    &lt;/xjdf:ProductList&gt;
    &lt;xjdf:ParameterSet Name="RunList"&gt;
        &lt;xjdf:Parameter&gt;
            &lt;xjdf:RunList&gt;
                &lt;xjdf:FileSpec URL="test_file.pdf"/&gt;
            &lt;/xjdf:RunList&gt;
        &lt;/xjdf:Parameter&gt;
    &lt;/xjdf:ParameterSet&gt;
    &lt;xjdf:ParameterSet Name="Contact"&gt;
        &lt;xjdf:Parameter&gt;
            &lt;xjdf:Contact&gt;
                &lt;xjdf:Person FamilyName="Meissner" FirstName="Stefan"/&gt;
                &lt;xjdf:Company OrganizationName="flyeralarm GmbH"/&gt;
                &lt;xjdf:ComChannel ChannelType="Phone" 
                    Locator="tel:+49.931.465840"/&gt;
                &lt;xjdf:Address PostalCode="97082" City="Wuerzburg" 
                    Street="Alfred-Nobel-Strasse 15"/&gt;
            &lt;/xjdf:Contact&gt;
        &lt;/xjdf:Parameter&gt;
    &lt;/xjdf:ParameterSet&gt;
&lt;/xjdf:XJDF&gt;</programlisting></para>

      <para>Following the associated Java code snippet which shows how to
      create such an XJDF Document as shown above:</para>

      <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// create XJDF Document
ProductBuilder productBuilder = new ProductBuilder(1500, "Poster", 
    "PTD Value", "FA-PRD-123456");
productBuilder.addIntent(nf.createMediaIntent("IPM_90"));
Product product = productBuilder.build();

ContactBuilder contactBuilder = new ContactBuilder();
contactBuilder.addCompany("flyeralarm GmbH");
contactBuilder.addPerson("Meissner", "Stefan", null);
contactBuilder.addAddress("Alfred-Nobel-Strasse 15", "97082", "Wuerzburg");
contactBuilder.addComChannel("Phone", "tel:+49.931.465840");
Contact contact = contactBuilder.build();

XJdfBuilder xJdfBuilder = new XJdfBuilder("FA-SIG-123456", "Web2Print", 
    "My lovely Poster");
xJdfBuilder.addParameter(nf.createRunList("test_file.pdf"));
xJdfBuilder.addParameter(contact);
xJdfBuilder.addProduct(product);
XJDF xjdf = xJdfBuilder.build();

// parse document
byte[] bytes = new XJdfParser().parseXJdf(xjdf);

// output
System.out.println(new String(bytes));</programlisting></para>

      <para>The current version of CIP4 XJdfLib provides the following builder
      classes:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para><emphasis role="bold">XJdfBuilder</emphasis></para>

          <para>Creation of XJDF Documents. Manages the dealing with Products
          and Parameters.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">ProductBuilder</emphasis></para>

          <para>Creation of Product-Nodes. Handles all Intent nodes.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">ContactBuilder</emphasis></para>

          <para>Creation of Contact-Nodes. Organize the handling with contact
          details.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">LayoutBuilder</emphasis></para>

          <para>Creation of Layout-Nodes. Manages the handling with Layout
          elements.</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>XJdfBuilder</title>

        <para>The XJdfBuilder is responsible for the creation and management
        of XJDF-Root-Nodes as well as the main structure in XJDF Documents.
        All child nodes can easily be appended by calling the associated
        "add-" methods. The logic where exactely a specific node has to be put
        is covered by the builder class.</para>

        <para>For instance the XJDF Specification defines that all
        Parameter-Nodes have to be embedded within a specific ParameterSet
        element. This mechanism is fully supported by the builder class. So
        when adding a new Parameter item, the addParameter() method checks if
        the right ParameterSet-Node already exists. If not, a new one is
        created automatically. The following is a Java code snippet of how to
        use the XJdfBuilder.</para>

        <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

Contact contact = [...];
Product product = [...];

// create XJDF with builder
XJdfBuilder xJdfBuilder = XJdfBuilder.newInstance("FA-SIG-123456");
xJdfBuilder.addParameter(nf.createRunList("test_file.pdf"));
xJdfBuilder.addParameter(contact);
xJdfBuilder.addProduct(product);
XJDF xjdf = xJdfBuilder.build();

// build XJDF Doc
XJDF xJdf = xJdfBuilder.build();</programlisting></para>

        <section>
          <title>Partitioning of Parameter nodes</title>

          <para>Following a sample of a partitioned RunList. The XJDF Document
          references the PDF files for cover and body separately. This
          mechanism is called partitioning and requires an Part-Node per
          item.</para>

          <para><programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;!-- Generated by CIP4 xJdfLib 0.4 --&gt;
&lt;xjdf:XJDF xmlns:xjdf="http://www.CIP4.org/JDFSchema_2_0" ID="XJDF_2GYLJJJG" 
    JobID="FA-SIG-123456" Category="Web2Print" Version="2.0"&gt;
    &lt;xjdf:ProductList&gt;
        &lt;xjdf:Product Amount="1500"/&gt;
    &lt;/xjdf:ProductList&gt;
    &lt;xjdf:ParameterSet Name="RunList"&gt;
        &lt;xjdf:Parameter&gt;
            &lt;xjdf:RunList&gt;
                &lt;xjdf:FileSpec URL="cover.pdf"/&gt;
            &lt;/xjdf:RunList&gt;
            &lt;xjdf:Part Run="cover"/&gt;
        &lt;/xjdf:Parameter&gt;
        &lt;xjdf:Parameter&gt;
            &lt;xjdf:RunList&gt;
                &lt;xjdf:FileSpec URL="body.pdf"/&gt;
            &lt;/xjdf:RunList&gt;
            &lt;xjdf:Part Run="body"/&gt;
        &lt;/xjdf:Parameter&gt;
    &lt;/xjdf:ParameterSet&gt;
&lt;/xjdf:XJDF&gt;</programlisting>Here a demonstration of how to create such
          partitioned XJDF Documents using the CIP4 XJDF Library. The
          XJdfBuilder class provides a further override of the addParameter()
          method to handle paritioning:</para>

          <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// create XJDF Document
ProductBuilder productBuilder = new ProductBuilder(1500);
Product product = productBuilder.build();

Part partCover = nf.createPart();
partCover.setRun("cover");

Part partBody = nf.createPart();
partBody.setRun("body");

XJdfBuilder xJdfBuilder = new XJdfBuilder("FA-SIG-123456", "Web2Print");
xJdfBuilder.addParameter(nf.createRunList("cover.pdf"), partCover);
xJdfBuilder.addParameter(nf.createRunList("body.pdf"), partBody);
xJdfBuilder.addProduct(product);
XJDF xjdf = xJdfBuilder.build();</programlisting></para>
        </section>
      </section>

      <section>
        <title>ProductBuilder</title>

        <para>The Product-Node is another signification element in an XJDF
        Document. This node specifies the product configuration how desired by
        the customer. In XJDF, most product configurations are defined as
        Intent-Nodes. A Product-Node consists of at least itself, its
        attributes and a set of Intent-Node subelements. The ProductBuilder
        organizes the creation of a Product-Node as well as the handling of
        all its Intent-Nodes.</para>

        <para><programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;!-- Generated by CIP4 xJdfLib 0.4 --&gt;
&lt;xjdf:XJDF xmlns:xjdf="http://www.CIP4.org/JDFSchema_2_0" ID="XJDF_4Q1KC6OM" 
    JobID="FA-SIG-123456" Category="Web2Print" Version="2.0"&gt;
    &lt;xjdf:ProductList&gt;
        &lt;xjdf:Product Amount="1500"&gt;
            &lt;xjdf:Intent Name="MediaIntent"&gt;
                &lt;xjdf:MediaIntent MediaQuality="IPG_90"/&gt;
            &lt;/xjdf:Intent&gt;
            &lt;xjdf:Intent Name="LayoutIntent"&gt;
                &lt;xjdf:LayoutIntent Sides="TwoSidedHeadToHead" Pages="2" 
                    FinishedDimensions="297.63779528 419.52755906 0.0"/&gt;
            &lt;/xjdf:Intent&gt;
            &lt;xjdf:Intent Name="ColorIntent"&gt;
                &lt;xjdf:ColorIntent NumColors="4 4"/&gt;
            &lt;/xjdf:Intent&gt;
        &lt;/xjdf:Product&gt;
    &lt;/xjdf:ProductList&gt;
&lt;/xjdf:XJDF&gt;</programlisting>Following, the associated Java code snippet
        for the creation of such an Product-Node:</para>

        <para><programlisting language="java">// new factory instance
XJdfNodeFactory nf = new XJdfNodeFactory();

// create product node
ProductBuilder productBuilder = new ProductBuilder(1500);
productBuilder.addIntent(nf.createMediaIntent("IPG_90"));
productBuilder.addIntent(nf.createLayoutIntent(2, "TwoSidedHeadToHead", 
                                  new Shape(297.63779528, 419.52755906)));
productBuilder.addIntent(nf.createColorIntent(new IntegerList(4, 4)));
Product product = productBuilder.build();

XJdfBuilder xJdfBuilder = new XJdfBuilder("FA-SIG-123456", "Web2Print");
xJdfBuilder.addProduct(product);
XJDF xjdf = xJdfBuilder.build();</programlisting></para>
      </section>

      <section>
        <title>ContactBuilder</title>

        <para>The Contact Node in XJDF keeps all customers contact details.
        There are several types of subnodes for holding the information. In
        order to simplify the creation and initialization of these elements
        the ContactBuilder class has been designed and developed.</para>

        <para><programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;XJDF xmlns ="http://www.CIP4.org/JDFSchema_2_0"&gt;
    [...]
    &lt;ParameterSet Name="Contact"&gt;
        &lt;Parameter&gt;
            &lt;Contact ContactTypes="Customer Delivery"&gt;
                &lt;Address PostalCode="97080" City="Würzburg" 
                    Country="Germany" Street="Alfred-Nobel-Straße 18"/&gt;
                &lt;ComChannel ChannelType="Email" Locator="info@flyeralarm.de"/&gt;
                &lt;ComChannel ChannelType="Phone" Locator="+49.931.465840"/&gt;
                &lt;Company OrganizationName="flyeralarm GmbH"/&gt;
            &lt;/Contact&gt;
        &lt;/Parameter&gt;
    &lt;/ParameterSet&gt;
    [...]
&lt;/XJDF&gt;</programlisting>Using the ContactBuilder Person-, Company-,
        Address- and ComChannel nodes easily can be created and added by plain
        method calls:</para>

        <para><programlisting language="java">// new ContactBuilder instance 
ContactBuilder contactBuilder = ContactBuilder.newInstance();

// set contact details
contactBuilder.addAddress("Alfred-Nobel-Straße 18", "97080", "Würzburg");
contactBuilder.addComChannel("Email", "info@flyeralarm.de");
contactBuilder.addComChannel("Phone", "+49.931.465840");
contactBuilder.addCompany("flyeralarm GmbH");

// build contact
Contact contact = contactBuilder.build();</programlisting></para>
      </section>

      <section>
        <title>LayoutBuilder</title>

        <para/>
      </section>
    </section>

    <section>
      <title>XJdfParser</title>

      <para>The XJdfParser writes an XJDF Document Object Tree to a binary
      stream and vice versa. Cases of practical use are dealing with XJDF
      Documents and http transmissions or working on file system. Internally,
      the parser class is working with the Java interfaces
      <emphasis>java.io.InputStream</emphasis> and
      <emphasis>java.io.OutputStream</emphasis>. So it doesn’t matter which
      kind of stream is used for reading or writing. The following is a sample
      of how to save an XJDF Document to a local file system. For writing an
      XJDF Document to a http stream just use the specific implementation to
      achieve this.</para>

      <programlisting language="java">// any XJDF Document
XJDF xJdf = [...];

// target file
File tmpFile = new File("/var/tmp/myXJdfDoc.xjdf");
OutputStream os = new FileOutputStream(tmpFile);

// write XJDF Document to file using XJdfParser
XJdfParser xJdfParser = XJdfParser.newInstance();
xJdfParser.parseXJdf(xJdf, os);

// close stream
os.close();</programlisting>

      <para>When parsing XJDF Document Object Trees to binary streams, the
      document is automatically being validated against the XJDF Schema.
      Internally the <emphasis>XJdfValidator</emphasis> class is used to
      achieve this. In case the document is invalid a
      <emphasis>ValidationException</emphasis> is thrown. The message of the
      exception lists all points making the document invalid. In order to skip
      the validation process during parsing there is an optional parameter
      skipValidation in parseXJdf() method.</para>

      <programlisting language="java">// skip validation when parsing
xJdfParser.parseXJdf(xJdf, os, true);</programlisting>

      <para>In order to create an XJDF Object Tree from a binary stream the
      XJdfParser class contains a method <emphasis>parseStream()</emphasis>.
      This method accepts an InputStream as input parameter. Out of the box
      the Java framework provides many different implementations of this
      interface. All InputStreams can easily be parsed to an XJDF Document
      Object Tree by calling the method <emphasis>parseStream()</emphasis>.
      The sample below, for example, uses the
      <emphasis>FileInputStream</emphasis> implementation which is responsible
      for creating an <emphasis>InputStream</emphasis> from a local file. An
      InputStream created from an HttpRequest also would be suitable and often
      is being used when working with http transmissions.</para>

      <programlisting language="java">// open XJDF Document as InputStream
File tmpFile = new File("/var/tmp/myXJdfDoc.xjdf");
InputStream is = new FileInputStream(tmpFile);

// parse stream to XJDF Document Object Tree
XJdfParser xJdfParser = XJdfParser.newInstance();
XJDF xJdf = xJdfParser.parseStream(is);</programlisting>

      <note>
        <para>In order to analyze or extract details from an XJDF Document it
        is strongly recommended to work with XPath expressions. Parsing the
        whole document and working with the DOM Tree Objects is no longer
        state of the art. This mechanism consumes time and raises code
        complexity. Besides, parsing an InputStream is also prone to errors
        because it requires fully conform documents. CIP4 xJdfLib provides an
        extra class <emphasis>XJdfNavigator</emphasis> for dealing with XPath
        expressions in XJDF Documents. XJDF is desinged for XPath so the
        preferred way of reading XJDF Documents is XPath.</para>
      </note>
    </section>

    <section>
      <title>XJdfValidator</title>

      <para>The XJdfValidator class validates an XJDF Binary Stream against
      the latest XJDF Schema. A new instance is required for each validation
      process. So when validating an XJDF Document, first of all a new
      validator object has to be created using the static method
      <emphasis>newInstance()</emphasis>. The method
      <emphasis>isValid()</emphasis> runs the validation process and finally
      returns the result as Boolean.</para>

      <para>Out of the box all XJDF Documents created with the library are
      automatically being validated during the parsing process. This mechanism
      can be explicitly switched off. For more details about that see
      XJdfParser.</para>

      <programlisting language="java">// get binary stream
InputStream xJdfStream = [...]

// new instance of XJdfValidator
XJdfValidator xJdfValidator = XJdfValidator.newInstance(xJdfStream);

// get validation result
boolean result = xJdfValidator.isValid();</programlisting>

      <para>The validation procedure also can be done in a single line:</para>

      <programlisting language="java">// get binary stream
InputStream xJdfStream = [...]

// process validation in a single line
boolean result = XJdfValidator.newInstance(xJdfStream).isValid();</programlisting>

      <para>If a more detailed output is desired all errors are available as a
      list of Strings by calling the method
      <emphasis>getMessages()</emphasis>. In order to simplify user output (e.
      g. for the creation of exception messages) there is an additional method
      <emphasis>getMessagesText(),</emphasis> which converts all messages into
      a single String value.</para>

      <programlisting language="java">// get binary stream
InputStream xJdfStream = [...]

// validate
XJdfValidator xJdfValidator = XJdfValidator.newInstance(xJdfStream);
boolean result = xJdfValidator.isValid();

// message output
List&lt;String&gt; messages = xJdfValidator.getMessages(); 
String msgText = xJdfValidator.getMessagesText(); </programlisting>
    </section>

    <section>
      <title>XJdfNavigator</title>

      <para>The XPathNavigator class provides functionality for reading and
      modifying XJDF Documents using XPath. XPath is a very powerful XML
      Technology for working with XML Documents. More details about the XPath
      W3C Standard can be found here: http://www.w3.org/TR/xpath/.</para>

      <para>XPathNavigator directly works on InputStream objects, so there is
      no need to parse the document before hand. This mechanism saves time,
      code complexity and performance. One XPathNavigator instance is required
      for each XJDF Document processed. The method <emphasis>newInstance()
      </emphasis>creates a new object and initializes it by the XJDF Document
      InputStream. All attributes in document easily can be addressed and read
      using the method <emphasis>readAttribute()</emphasis> and the specific
      XPath expression as parameter. Modifications also can be done. The
      method <emphasis>updateAttribute()</emphasis> accepts a XPath expression
      plus the (new) attribute value. When all modifications are done finally
      the new XJDF Document stream is returned as InputStream by calling the
      method <emphasis>getXJdfStream():</emphasis></para>

      <programlisting language="java">// load XJDF Document as InputStream and create new XPathNavigator.
InputStream is = […]
XPathNavigator xPathNavigator = XPathNavigator.newInstance(is);

// read JobID
String xJobId = "/XJDF/@JobID";
String jobId = xPathNavigator.readAttribute(xJobId);

// read GeneralID IDUsage
String xIdUsage = "/XJDF/GeneralID/@IDUsage";
String idUsage = xPathNavigator.readAttribute(xIdUsage);

// read FileSpec URL of partition "Cover"
String xFileCover = "/XJDF/ParameterSet[@Name='RunList']/"
                  +  "Parameter[./Part/@Run='Cover']/RunList/FileSpec/@URL";
String fileCover = xPathNavigator.readAttribute(xFileCover);

// update Product Amount to 1500
String xAmount = "/XJDF/ProductList/Product/@Amount";
xPathNavigator.updateAttribute(xAmount, "1500");

// get modified XJDF Document as InputStream
InputStream is = xPathNavigator.getXJdfStream();
[…]</programlisting>

      <para>The following is a short XPath overview of expressions which are
      significant to XJDF Documents. The XJDF snippet after is used for
      extracting these attribute values:</para>

      <table>
        <title>XPath expressions</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">XPath Expression</entry>

              <entry align="center">Attribute Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>/XJDF/GeneralID/@IDUsage</entry>

              <entry>"CatalogID"</entry>
            </row>

            <row>
              <entry>/XJDF/ParameterSet[@Name='RunList']/Parameter[./Part/@Run='Cover']/RunList/FileSpec/@URL</entry>

              <entry>"cover.pdf"</entry>
            </row>

            <row>
              <entry>/XJDF/ProductList/Product/@Amount</entry>

              <entry>"1000"</entry>
            </row>

            <row>
              <entry/>
            </row>
          </tbody>
        </tgroup>
      </table>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;XJDF xmlns ="http://www.CIP4.org/JDFSchema_2_0" Category="Web2Print" 
    DescriptiveName="PrintJob 123456" JobID="FA-SIG-123456"&gt;
    &lt;GeneralID IDUsage="CatalogID" IDValue="46" /&gt;
    &lt;ProductList&gt;
        &lt;Product Amount="1000" /&gt;
    &lt;/ProductList&gt;
    &lt;ParameterSet Name="RunList"&gt;
        &lt;Parameter&gt;
            &lt;Part Run="Cover" /&gt;
            &lt;RunList&gt;
                &lt;FileSpec URL="cover.pdf" /&gt;
            &lt;/RunList&gt;
        &lt;/Parameter&gt;
        &lt;Parameter&gt;
            &lt;Part Run="Body" /&gt;
            &lt;RunList&gt;
                &lt;FileSpec URL="body.pdf" /&gt;
            &lt;/RunList&gt;
        &lt;/Parameter&gt;
    &lt;/ParameterSet&gt;
&lt;/XJDF&gt;</programlisting>
    </section>

    <section>
      <title>XJdfConstants</title>

      <para>When working with XJDF, there are several constants which are
      required in some use cases. So the CIP4 xJdfLib also provides a static
      class <emphasis>XJdfConstants</emphasis>, where most common constants
      are already defined. Here is a list of all items in this class:</para>

      <table>
        <title>Overview xJdfLib Constants</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Constant</entry>

              <entry align="center">Value</entry>

              <entry align="center">Use</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>NAMESPACE_JDF20</entry>

              <entry>"http://www.cip4.org/JDFSchema_2_0"</entry>

              <entry>JDF Default Namespace</entry>
            </row>

            <row>
              <entry>NAMESPACE_W3_XML</entry>

              <entry>"http://www.w3.org/2001/XMLSchema"</entry>

              <entry>W3C XML Namespace</entry>
            </row>

            <row>
              <entry>XJDF_CURRENT_VERSION</entry>

              <entry>"2.0"</entry>

              <entry>Current JDF Version Number</entry>
            </row>

            <row>
              <entry>XJDF_LIB_VERSION</entry>

              <entry>"0.4"</entry>

              <entry>xJdfLib Version Number</entry>
            </row>

            <row>
              <entry>MEDIA_TYPE_VND_JMF</entry>

              <entry>"application/vnd.cip4-jmf+xml"</entry>

              <entry>MIME Type JMF</entry>
            </row>

            <row>
              <entry>MEDIA_TYPE_VND_JDF</entry>

              <entry>"application/vnd.cip4-jdf+xml"</entry>

              <entry>MIME Type JDF</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>All constants are static and public. So they can be easily
      accessed by typing the class name XJdfConstants and the specific name of
      the constant:</para>

      <programlisting language="java">// get XJDF default namespace
String defaultNamespace = XJdfConstants.NAMESPACE_JDF20;

// get current version of XJDF
String currentVersion = XJdfConstants.XJDF_CURRENT_VERSION;</programlisting>
    </section>

    <section>
      <title>Converter Classes</title>

      <para>In order to convert from Java datatypes to JDF or ISO datatypes
      and the way around the library provides several converter classes. The
      following is a list of all converters with a short description:</para>

      <table>
        <title>Overview Converter classes</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Converter Class</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>DateConverter</entry>

              <entry>Conversion between the Java Calendar object and the ISO
              Date String how specified in XJDF Specification.</entry>
            </row>

            <row>
              <entry>DimensionConverter</entry>

              <entry>Conversion from millimeter to dtp and the way
              around.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </chapter>

  <chapter>
    <title>Developer Infos</title>

    <para>This chapter describes the internals of the XJDF Library. This is
    useful when you are interested in getting involved in development.
    Otherwise feel free to skip it.</para>

    <section>
      <title>Update XJDF Schema</title>

      <para>Generating new sources after the XJDF Schema has changed is a very
      common task. The XSD is located at
      “src/main/resources/org/cip4/lib/xjdf/xsd/JDF20.xsd”. In order to update
      sources, just overwrite the schema file and run the “updateXJdfXSD.bat”
      batch script. All files located in the java package
      “org.cip4.lib.xjdf.schema.jdf” are automatically replaced.</para>
    </section>
  </chapter>

  <chapter>
    <title>Conclusion</title>

    <para>Currently the CIP4 xJdfLib project is still in a very early stadium.
    In addition the library is based on a specification which has not been
    completely finished yet. So when using the library please keep in mind
    that concepts or even the XJDF structure may change from one version to
    the next. The first official stable version is indicated by starting with
    1 in version number (1.x).</para>

    <para>Feature requests and bug reports are always very welcome. Please do
    not hesitate to create a new ticket for your issues. In CIP4 JIRA Ticket
    System there you will find the project “xJdfLib”, where you can place new
    posts.</para>
  </chapter>
</book>
