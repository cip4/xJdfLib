package org.cip4.lib.xjdf.xml;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.xml.bind.JAXBException;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;
import org.cip4.lib.xjdf.schema.XJDF;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlParser;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlValidator;
import org.cip4.lib.xjdf.xml.internal.JAXBContextFactory;
import org.cip4.lib.xjdf.xml.internal.XJdfNamespaceMapper;

/**
 * Parsing logic for building a XML Document from XJDF DOM-Tree and the way around.
 *
 * @author s.meissner
 */
public class XJdfParser extends AbstractXmlParser<XJDF> {

    /**
     * Default constructor.
     *
     * @throws JAXBException Thrown in case a JAXBException occurs.
     */
    public XJdfParser() throws JAXBException {
        super(JAXBContextFactory.getInstance());
    }

    /**
     * Parse a XJDF Object Tree to a binary output stream.
     *
     * @param xJdf XJDF Object Tree for parsing.
     * @param os Target OutputStream where XJdfDocument is being parsed.
     *
     * @throws Exception Is thrown in case XJDF is not valid and validation process is not being skipped.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final void parseXJdf(final XJDF xJdf, final OutputStream os) throws Exception {
        parseXml(xJdf, os);
    }

    /**
     * Parse a XJDF Object Tree to a binary output stream.
     *
     * @param xJdf XJDF Object Tree for parsing.
     * @param os Target OutputStream where XJdfDocument is being parsed.
     * @param skipValidation Skip validation.
     *
     * @throws Exception Is thrown in case XJDF is not valid and validation process is not being skipped.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final void parseXJdf(final XJDF xJdf, final OutputStream os, final boolean skipValidation) throws Exception {
        parseXml(xJdf, os, skipValidation);
    }

    /**
     * Parse a XJDF Object Tree to a byte array.
     *
     * @param xJdf XJDF Object Tree for parsing.
     *
     * @return XJDF as byte array.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final byte[] parseXJdf(final XJDF xJdf) throws Exception {
        return parseXml(xJdf);
    }

    /**
     * Parse a XJDF Object Tree to a byte array.
     *
     * @param xJdf XJDF Object Tree for parsing.
     * @param skipValidation Skip validation.
     *
     * @return XJDF as byte array.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final byte[] parseXJdf(final XJDF xJdf, final boolean skipValidation) throws Exception {
        return parseXml(xJdf, skipValidation);
    }

    @Override
    protected final NamespacePrefixMapper getNamespacePrefixMapper() {
        return new XJdfNamespaceMapper();
    }

    @Override
    protected final String getXmlHeader() {
        String header = "<!-- Generated by CIP4 xJdfLib " + XJdfConstants.XJDF_LIB_VERSION + " -->\r\n";
        header = header.replaceAll("  ", " ");
        return header;
    }

    @Override
    protected final AbstractXmlValidator<XJDF> createValidator(final InputStream is) throws IOException {
        return new XJdfValidator(is);
    }

}
