package org.cip4.lib.xjdf.xml;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import org.cip4.lib.xjdf.exception.XJdfParseException;
import org.cip4.lib.xjdf.schema.XJMF;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlParser;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlValidator;
import org.cip4.lib.xjdf.xml.internal.JAXBContextFactory;
import org.cip4.lib.xjdf.xml.internal.XJdfNamespaceMapper;
import org.glassfish.jaxb.runtime.marshaller.NamespacePrefixMapper;


import java.io.IOException;
import java.io.OutputStream;

/**
 * Parsing logic for building a XML Document from XJMF DOM-Tree and the way around.
 */
public class XJmfParser extends AbstractXmlParser<XJMF> {

    private final boolean enforceNamespacePrefix;

    private static JAXBContext getJAXBContextInstance() throws XJdfParseException {
        try {
            return JAXBContextFactory.getInstance();
        } catch (JAXBException e) {
            throw new XJdfParseException(e);
        }
    }

    /**
     * Default constructor.
     */
    public XJmfParser() throws XJdfParseException {
        this(true);
    }

    /**
     * Custom constructor. Accepting a flag for initializing.
     *
     * @param enforceNamespacePrefix True in case namespace prefix is requried.
     */
    public XJmfParser(boolean enforceNamespacePrefix) throws XJdfParseException {
        super(getJAXBContextInstance());
        this.enforceNamespacePrefix = enforceNamespacePrefix;
    }

    /**
     * Parse a XJMF Object Tree to a binary output stream.
     *
     * @param xjmf XJMF Object Tree for parsing.
     * @param os Target OutputStream where XJMF is being parsed.
     */
    public final void parseXJmf(final XJMF xjmf, final OutputStream os)
        throws XJdfParseException {
        parseXJmf(xjmf, os, false);
    }

    /**
     * Parse a XJMF Object Tree to a binary output stream.
     *
     * @param xjmf XJMF Object Tree for parsing.
     * @param os Target OutputStream where XJMF is being parsed.
     * @param skipValidation Skip validation.
     */
    public final void parseXJmf(final XJMF xjmf, final OutputStream os, final boolean skipValidation)
        throws XJdfParseException {
        parseXml(xjmf, os, skipValidation);
    }

    /**
     * Parse a XJMF Object Tree to a byte array.
     *
     * @param xjmf XJMF Object Tree for parsing.
     *
     * @return XJMF as byte array.
     * @throws IOException Is thrown in case any IO error occurs.
     */
    public final byte[] parseXJmf(final XJMF xjmf)
        throws XJdfParseException, IOException {
        return parseXJmf(xjmf, false);
    }

    /**
     * Parse a XJMF Object Tree to a byte array.
     *
     * @param xjmf XJMF Object Tree for parsing.
     * @param skipValidation Skip validation.
     *
     * @return XJMF as byte array.
     */
    public final byte[] parseXJmf(final XJMF xjmf, final boolean skipValidation)
            throws XJdfParseException, IOException {

        return parseXml(xjmf, skipValidation);
    }

    @Override
    protected final NamespacePrefixMapper getNamespacePrefixMapper() {
        return new XJdfNamespaceMapper(enforceNamespacePrefix);
    }

    @Override
    protected String getXmlHeader() {
        String header = "<!-- Generated by CIP4 xJdfLib " + XJdfConstants.XJDFLIB_VERSION + " -->\r\n";
        header = header.replaceAll("  ", " ");
        return header;
    }

    @Override
    protected final AbstractXmlValidator createValidator() {
        return new XJdfValidator();
    }
}
